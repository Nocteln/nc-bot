const Discord = require("discord.js");
const {CreateInteraction, MessageGiveaways} = require("./Constants")
const EmbedGeneratorBuilder = require("./EmbedGeneratorBuilder")
const {CustomId} = require("./functions")


module.exports = class Interaction {
  /**
   * 
   * @param {CreateInteraction} options 
   */
  constructor(options) {
    this.buttonEmoji = options.buttonEmoji;
    this.buttonStyle = options.buttonStyle;
    this.client = options.client;
    this.winnerNumber = options.winnerNumber;

    this.customID = CustomId();
    this.customIdStopButton = CustomId();
    this.customIdReroll = CustomId();

    this.memberParticipate = [];
  }

/**
 * @param {Discord.Message} message 
 * @param {Object} timeout 
 * @param {EmbedGeneratorBuilder} embedbuilder
 */

  createInteraction(message, timeout) {

    this.client.on("interactionCreate", async (interaction) => {

      if (interaction.type === Discord.InteractionType.MessageComponent) {

        if (interaction.customId === this.customID) {
          if (this.memberParticipate.includes(interaction.user.id)) return interaction.reply({content: "You are already in the giveaway!", ephemeral: true})
          
          await interaction?.reply({content: 'Tu as été ajouté(e) au giveaway bonne chance!', ephemeral: true})
          this.memberParticipate.push(interaction.user.id)
        }

        if (interaction.customId === this.customIdStopButton) {

          if (!interaction.memberPermissions.toArray().includes("ManageMessages")) return interaction.reply({content: "❌ Erreur: tu n'est pas autorisé à faire ceci", ephemeral: true})

          let EmbedStopped = new Discord.EmbedBuilder()
            .setDescription(`Le giveaway à été arrété!\n${this.memberParticipate.length < 1 ? "" : `Entrées: **${this.memberParticipate.length}**.`}`)
            .setColor("#2f3136")
            .setTimestamp()

          clearTimeout(timeout);
          await message.edit({content: MessageGiveaways.giveawayStoped, embeds: [EmbedStopped], components: [], ephemeral: true})
          return interaction.reply({content: "Le giveaway à bien été arrété", ephemeral: true})
        }

      }

    });

  }

  createButton() {
    let button = new Discord.ActionRowBuilder()
    .addComponents(
        new Discord.ButtonBuilder()
        .setCustomId(this.customID)
        .setLabel('Participate')
        .setEmoji(this.buttonEmoji)
        .setStyle(this.buttonStyle)
        )
    .addComponents(
        new Discord.ButtonBuilder()
        .setCustomId(this.customIdStopButton)
        .setLabel("Stop")
        .setEmoji("⛔")
        .setStyle(Discord.ButtonStyle.Danger)
        )
    .addComponents(
          new Discord.ButtonBuilder()
          .setCustomId(this.customIdReroll)
          .setLabel("Reroll")
          .setEmoji("↗️")
          .setStyle(Discord.ButtonStyle.Success)
        )

        return button;
  }

  getRerollCustomIdButton() {
    return this.customIdReroll;
  }



  
  getEntries() {
    return `${this.memberParticipate.length}`;
  }

  /**
   * 
   * @param {Number} number 
   */

  getWinnerRandom(number) {
    let tirage = [];
    let giveawayRamdom = this.memberParticipate;

    if (number > giveawayRamdom.length) number = giveawayRamdom.length;

    for (let i = 0; i < number; i++) {
      let random = `${giveawayRamdom[Math.floor(Math.random() * giveawayRamdom.length)]}`
      tirage.push(`<@${random}>`)
      let index = giveawayRamdom.indexOf(random)
      delete giveawayRamdom[index];
    }

    return tirage;
  }
}