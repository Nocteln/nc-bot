const Discord = require("discord.js")
const {
  GiveawaysManagerOptions,
  GiveawaysStartOptions,
  MessageGiveaways
} = require("../utils/Constants.js")

const Time = require("../utils/time")
const EmbedGeneratorBuilder = require("../utils/EmbedGeneratorBuilder")
const Interaction = require("../utils/Interaction")


module.exports = class GiveawaysManager {
  /**
   * 
   * @param {Discord.Client} client 
   * @param {GiveawaysManagerOptions} options 
   */
  constructor(client, options) {

    this.client = client;
    this.embedColor = options.embedColor;
    this.buttonEmoji = options.buttonEmoji;

    this.message = null;
    this.messageInteraction = null;
  }



  /**
   * 
   * @param {Discord.Channel} channel 
   * @param {GiveawaysStartOptions} options 
   */

  async start(channel, options) {

    //Initialisation de diverses choses;
    let Channel = this.client.channels.cache.get(channel.id);
    let message = options.interaction;
    let time = new Time(options.time).msByTheTime();
    let ms = new Time(options.time).ms()

    //Le manager des Embeds
    let EmbedManager = new EmbedGeneratorBuilder(time, {
      interaction: message, 
      winnerNumber: options.winnerNumber,
      Title: options.prize,
      Color: this.embedColor,
      Emoji: `${this.buttonEmoji}`
    });
    //l'embed au lancement
    let Embed = EmbedManager.Embed()
    
    // Le manager des intéractions
    let InteractionManager = new Interaction({
      buttonEmoji: this.buttonEmoji,
      buttonStyle: Discord.ButtonStyle.Primary,
      client: this.client,
      winnerNumber: options.winnerNumber
    });

    //Les bouttons
    let button = InteractionManager.createButton()
    
    //Envoie des messages du giveaway au lancement 
    await message.reply({content: "Le giveaway est lancé", ephemeral: true});
    await Channel.send({content: `${MessageGiveaways.giveaway}`, embeds: [Embed], components: [button]}).then(async mss => {
      this.message = mss;
    });
    
    
    

    
    // Après le giveaways
    let TimeoutGiveawayEnding = setTimeout(() => {
      
      //Initialisation de diverses choses;
      let winnerRandom = InteractionManager.getWinnerRandom(options.winnerNumber)
      let entrie = InteractionManager.getEntries()
      
      //Le manager des Embeds
      let EmbedManager = new EmbedGeneratorBuilder(time, {
        interaction: message, 
        winnerNumber: options.winnerNumber,
        Title: options.prize,
        Color: this.embedColor,
        Emoji: `${this.buttonEmoji}`,
        winnerRandom: winnerRandom,
        entries: entrie
      });
      
      //Les embeds après le giveaway
      let EntrieEmbed = EmbedManager.entrieEmbed(this.message) 
      let Embed = EmbedManager.endEmbed()
      
      //vérifier si il n'y a personne qui a participer : si oui => une erreur
      if (String(winnerRandom).includes("undefined")) {
        message.reply({content: `❌ Error: Il y a besoin d'une personne pour completer ce giveaway!`, embeds: [], ephemeral: true});
        return this.message.delete();
      }

      //les messages après le giveaway
      this.message.reply({content: `Bien joué ${winnerRandom.join(", ")}! Tu as gagné \`${options.prize}\`!`, embeds: [EntrieEmbed]});
      this.message.edit({content: `${MessageGiveaways.giveawayEnded}`, embeds: [Embed], components: []});
    }, ms)




    //Le boutton pour reroll
    this.client.on("interactionCreate", async (interaction) => {
      if (interaction.customId === InteractionManager.getRerollCustomIdButton()) {

        if (!interaction.memberPermissions.toArray().includes("ManageMessages")) return interaction.reply({content: "❌ Error: You are not authorized to perform this action.", ephemeral: true})

        //Initialisation de diverses choses;
        let winnerRandom = InteractionManager.getWinnerRandom(options.winnerNumber)
        let entrie = InteractionManager.getEntries()
        
        //Le manager des Embeds
        let EmbedManager = new EmbedGeneratorBuilder(time, {
          interaction: message, 
          winnerNumber: options.winnerNumber,
          Title: options.prize,
          Color: this.embedColor,
          Emoji: `${this.buttonEmoji}`,
          winnerRandom: winnerRandom,
          entries: entrie
        });
        
        clearTimeout(TimeoutGiveawayEnding)
        //Les embeds après le giveaway
        let EntrieEmbed = EmbedManager.entrieEmbed(this.message) 
        let Embed = EmbedManager.endEmbed(Math.round((Date.now() / 1000) - time))
    
        //vérifier si il n'y a personne qui a participer : si oui => une erreur
        if (String(winnerRandom).includes("undefined")) {
          interaction.reply({content: `❌ Error: There must be at least one winner to complete this giveaway!`, embeds: [], ephemeral: true});
          return this.message.delete();
        }

        //les messages après le giveaway
        this.message.reply({content: `Congratulations ${winnerRandom.join(", ")}! You won the **${options.prize}**!`, embeds: [EntrieEmbed]});
        this.message.edit({content: `${MessageGiveaways.giveawayEnded}`, embeds: [Embed], components: []});
      }
    })



    // créé l'intéraction des bouttons
    InteractionManager.createInteraction(this.message, TimeoutGiveawayEnding);
    
  }
  
  
}